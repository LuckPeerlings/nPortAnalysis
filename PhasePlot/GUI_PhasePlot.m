function GUI_PhasePlot(hObject, ~)
% user interface for phase plots of complex functions (internal use) 

% Usage: GUI_PhasePlot(hObject, ~)
% internal use only, call PPGUI instead
% contributed by Frank Martin 

% Part of the phase plot package
% Version 2.3, January 15, 2014
% Copyright (c) 2012-2014 by Elias Wegert (elias@wegert.com, www.wegert.com)

% size of the menu and the top of a figure
height_top_of_window = 60;

if nargin <= 0
    
    % size of the main window
    scrsz = get(0, 'ScreenSize');
    width = 350;
    height = 13 * 40;
    
    % main window
    hfig = findobj('Tag', 'PhasePlot');
    if isempty(hfig)
        hfig = figure('Name', 'Phase Plot', ...
            'NumberTitle', 'off', ...
            'Resize', 'off', ...
            'Position', [(scrsz(3) - width) / 2, ...
                (scrsz(4) - height) / 1 - height_top_of_window, ...
                width, height], ...
            'Tag', 'PhasePlot', ...
            'CloseRequestFcn', @GUI_PhasePlot);
    else
        figure(hfig)
        return
    end
	color = get(hfig, 'Color');
        
    % window for the phase plot of the function
    hfig_phaseplot = findobj('Tag', 'fig_phaseplot');
    
    if isempty(hfig_phaseplot)
        figure('Name', 'Phase plot of the function', ...
            'NumberTitle', 'off', ...
            'Position', [(scrsz(3) - width) / 2 - 575, ...
                scrsz(4) - 420 - height_top_of_window - 28, 560, 420], ...
            'Tag', 'fig_phaseplot');
    end
    
    % window for the phase plot of the identity
    hfig_identity = findobj('Tag', 'fig_identity');
    
    if isempty(hfig_identity)
        figure('Name', 'Phase plot of the identity (color scheme)', ...
            'NumberTitle', 'off', ...
            'Position', [(scrsz(3) + width) / 2 + 15, ...
                scrsz(4) - 420 - height_top_of_window - 28, 560, 420], ...
            'Tag', 'fig_identity');
    end
    
    figure(hfig)
    
    % description
    ax_descr = axes('Parent', hfig, ...
        'Units', get(hfig, 'Units'), ...
        'Position', [10, 0, width - 20, height], ...
        'XTick', [], 'YTick', [], ...
        'XColor', color, ...
        'YColor', color, ...
        'Box', 'on', ...
        'Color', color);
    
	text('Parent', ax_descr, ...
        'Position', [0.5, 0.95], ...
        'String', 'PHASE PLOT OF COMPLEX FUNCTION', ...
        'Interpreter', 'Tex', ...
        'HorizontalAlignment', 'center', ...
        'VerticalAlignment', 'top', ...
        'FontSize', 12, ...
        'FontName', 'Helvetica');
    
    text('Parent', ax_descr, ...
        'Position', [0.5, .8 ], ...
        'String', {'the function is depicted in the rectangular domain', ...
        ' ', 'x_{min}<Re(z)<x_{max},    y_{min}<Im(z)<y_{max}'},...
        'HorizontalAlignment', 'center', ...
        'VerticalAlignment', 'top', ...
        'FontSize', 12);
    
    text('Parent', ax_descr, ...
        'Position', [.5, 0.53], ...
        'String', 'set numbers of grid points in x and y direction',...
        'HorizontalAlignment', 'center', ...
        'VerticalAlignment', 'top', ...
        'FontSize', 12);
       
    text('Parent', ax_descr, ...
        'Position', [.5, 0.40], ...
        'String', {'choose one of the available color schemes'},...
        'HorizontalAlignment', 'center', ...
        'VerticalAlignment', 'top', ...
        'FontSize', 12);
     
    % function f(z)
    uicontrol(hfig, 'Style', 'text', ...
        'String', 'f(z) =', ...
        'Position', [10, 0.85 * height, 50, 0.04 * height], ...
        'BackgroundColor', color, ...
        'FontSize', 12);
                
	uicontrol(hfig, 'Style', 'edit', ...
        'Tag', 'function', ...
        'Position', [10 + 50, 0.85 * height, 250, 0.04 * height], ...
        'String', 'myfunction(z)', ... 
        'BackgroundColor', 'w', ...
        'FontSize', 12, ...
        'FontName', 'Helvetica');
    
    % x_min, x_max, y_min and y_max
    
    ax_xmin = axes('Parent', hfig, ...
        'Units', get(hfig, 'Units'), ...
        'Position', [10, .63 * height, 50, 0.04 * height], ...
        'XTick', [], 'YTick', [], ...
        'XColor', color, ...
        'YColor', color, ...
        'Box', 'on', ...
        'Color', color);
	text('Parent', ax_xmin, ...
        'Position', [0.5, 0.5], ...
        'String', 'x_{min} = ', ...
        'Interpreter', 'Tex', ...
        'HorizontalAlignment', 'center', ...
        'VerticalAlignment', 'middle', ...
        'FontSize', 11, ...
        'FontName', 'Helvetica');
    uicontrol(hfig, 'Style', 'edit', ...
        'Tag', 'xmin', ...
        'Position', [10 + 50, (.63+0.01) * height, 75, 0.04 * height], ...
        'String', '-2', ... 
        'BackgroundColor', 'w', ...
        'FontSize', 12, ...
        'FontName', 'Helvetica');
    
    ax_xmax = axes('Parent', hfig, ...
        'Units', get(hfig, 'Units'), ...
        'Position', [10 + width / 2, .63 * height, 50, 0.04 * height], ...
        'XTick', [], 'YTick', [], ...
        'XColor', color, ...
        'YColor', color, ...
        'Box', 'on', ...
        'Color', color);
	text('Parent', ax_xmax, ...
        'Position', [0.5, 0.5], ...
        'String', 'x_{max} = ', ...
        'Interpreter', 'Tex', ...
        'HorizontalAlignment', 'center', ...
        'VerticalAlignment', 'middle', ...
        'FontSize', 11, ...
        'FontName', 'Helvetica');
    uicontrol(hfig, 'Style', 'edit', ...
        'Tag', 'xmax', ...
        'Position', [10 + 50 + width / 2, (.63+0.01) * height, 75, 0.04 * height], ...
        'String', '2', ... 
        'BackgroundColor', 'w', ...
        'FontSize', 12, ...
        'FontName', 'Helvetica');
    
    ax_ymin = axes('Parent', hfig, ...
        'Units', get(hfig, 'Units'), ...
        'Position', [10, .57 * height, 50, 0.04 * height], ...
        'XTick', [], 'YTick', [], ...
        'XColor', color, ...
        'YColor', color, ...
        'Box', 'on', ...
        'Color', color);
	text('Parent', ax_ymin, ...
        'Position', [0.5, 0.5], ...
        'String', 'y_{min} = ', ...
        'Interpreter', 'Tex', ...
        'HorizontalAlignment', 'center', ...
        'VerticalAlignment', 'middle', ...
        'FontSize', 11, ...
        'FontName', 'Helvetica');
    uicontrol(hfig, 'Style', 'edit', ...
        'Tag', 'ymin', ...
        'Position', [10 + 50, (.63-.05) * height, 75, 0.04 * height], ...
        'String', '-2', ... 
        'BackgroundColor', 'w', ...
        'FontSize', 12, ...
        'FontName', 'Helvetica');
    
    ax_ymax = axes('Parent', hfig, ...
        'Units', get(hfig, 'Units'), ...
        'Position', [10 + width / 2, .57 * height, 50, 0.04 * height], ...
        'XTick', [], 'YTick', [], ...
        'XColor', color, ...
        'YColor', color, ...
        'Box', 'on', ...
        'Color', color);
	text('Parent', ax_ymax, ...
        'Position', [0.5, 0.5], ...
        'String', 'y_{max} = ', ...
        'Interpreter', 'Tex', ...
        'HorizontalAlignment', 'center', ...
        'VerticalAlignment', 'middle', ...
        'FontSize', 11, ...
        'FontName', 'Helvetica');
    uicontrol(hfig, 'Style', 'edit', ...
        'Tag', 'ymax', ...
        'Position', [10 + 50 + width / 2, (.63-.05) * height, 75, 0.04 * height], ...
        'String', '2', ... 
        'BackgroundColor', 'w', ...
        'FontSize', 12, ...
        'FontName', 'Helvetica');
    
    % resolution of x- and y-axis
    ax_xres = axes('Parent', hfig, ...
        'Units', get(hfig, 'Units'), ...
        'Position', [10, 0.43 * height, 50, 0.04 * height], ...
        'XTick', [], 'YTick', [], ...
        'XColor', color, ...
        'YColor', color, ...
        'Box', 'on', ...
        'Color', color);
	text('Parent', ax_xres, ...
        'Position', [0.5, 0.5], ...
        'String', 'x_{res} = ', ...
        'Interpreter', 'Tex', ...
        'HorizontalAlignment', 'center', ...
        'VerticalAlignment', 'middle', ...
        'FontSize', 12, ...
        'FontName', 'Helvetica');
    uicontrol(hfig, 'Style', 'edit', ...
        'Tag', 'xres', ...
        'Position', [10 + 50, 0.44 * height, 75, 0.04 * height], ...
        'String', '600', ... 
        'BackgroundColor', 'w', ...
        'FontSize', 12, ...
        'FontName', 'Helvetica');
    
    ax_yres = axes('Parent', hfig, ...
        'Units', get(hfig, 'Units'), ...
        'Position', [10 + width / 2, 0.43 * height, 50, 0.04 * height], ...
        'XTick', [], 'YTick', [], ...
        'XColor', color, ...
        'YColor', color, ...
        'Box', 'on', ...
        'Color', color);
	text('Parent', ax_yres, ...
        'Position', [0.5, 0.5], ...
        'String', 'y_{res} = ', ...
        'Interpreter', 'Tex', ...
        'HorizontalAlignment', 'center', ...
        'VerticalAlignment', 'middle', ...
        'FontSize', 12, ...
        'FontName', 'Helvetica');
   
    uicontrol(hfig, 'Style', 'edit', ...
        'Tag', 'yres', ...
        'Position', [10 + 50 + width / 2, 0.44 * height, 75, 0.04 * height], ...
        'String', '600', ... 
        'BackgroundColor', 'w', ...
        'FontSize', 12, ...
        'FontName', 'Helvetica');
                
	uicontrol(hfig, 'Style', 'popupmenu', ...
        'Tag', 'colorscheme', ...
        'Position', [40, 0.30 * height, 180, 0.04 * height], ...
        'Value', 2, ...
        'String', {'plain phase plot','phase + modulus',...
          'phase + conformal grid','standard domain coloring', ...
          'enhanced domain coloring', 'polar chessboard ', ...
          'cartesian chessboard', 'alternating b&w phase', ...
          'alternating b&w modulus', ...
          'b&w stripes (real part)', 'b&w stripes (imag part)'}, ... 
        'BackgroundColor', 'w', ...
        'FontSize', 10, ...
        'FontName', 'Helvetica', ...
        'Callback', 'GUI_PhasePlot(gcbo)');
      
    ax_col = axes('Parent', hfig, ...
        'Units', get(hfig, 'Units'), ...
        'Position', [250, 0.21 * height, 70, 70], ...
        'XTick', [], 'YTick', [], ...
        'XColor', color, ...
        'YColor', color, ...
        'Box', 'on', ...
        'Color', color);
    
    x = linspace(-1,1,120);
    y = x;
    [X, Y] = meshgrid(x, y);
    z = X + 1i * Y;
    
    PhasePlot(z, z, 'm');
    
    set(hfig, 'UserData', ax_col)
    
    uicontrol(hfig, 'Style', 'slider', ...
        'Position', [40, 0.25 * height, 180, 0.04 * height], ...
        'BackgroundColor', color, ...
        'Min', 1, 'Max', 50, ...
        'Value', 20, ...
        'SliderStep', [1 5] / 49, ...
        'Tag', 'SliderPhaseResolution', ...
        'Callback', 'GUI_PhasePlot(gcbo)');
    
    %uicontrol(hfig, 'Style', 'text', ...
    %    'Tag', 'ValuePhaseResolution', ...
    %    'String', '20', ...
    %    'Position', [10 + 130 + 160, 0.10 * height, 25, 0.04 * height], ...
    %    'BackgroundColor', color, ...
    %    'FontSize', 12, ...
    %    'FontName', 'Helvetica');
 
    
    % change the color scheme according to NIST coloring
    uicontrol(hfig, 'Style', 'checkbox', ...
        'Tag', 'NISTcoloring', ...
        'Position', [40, 0.20 * height, 150, 0.04 * height], ...
        'Value', 0, ...
        'String', 'NIST coloring', ... 
        'BackgroundColor', color, ...
        'FontSize', 12, ...
        'FontName', 'Helvetica', ...
        'Callback', 'GUI_PhasePlot(gcbo)');
    
    % phase plot on the sphere
    uicontrol(hfig, 'Style', 'checkbox', ...
        'Tag', 'plotsphere', ...
        'Position', [40, 0.13 * height, 150, 0.04 * height], ...
        'Value', 0, ...
        'String', 'plot on sphere', ... 
        'BackgroundColor', color, ...
        'FontSize', 12, ...
        'FontName', 'Helvetica', ...
        'Callback', 'GUI_PhasePlot(gcbo)');
    
    uicontrol(hfig, 'Style', 'checkbox', ...
        'Tag', 'zplane', ...
        'Position', [10 + width / 2, 0.13 * height, 150, 0.04 * height], ...
        'Value', 0, ...
        'String', 'entire sphere', ... 
        'BackgroundColor', color, ...
        'FontSize', 12, ...
        'FontName', 'Helvetica', ...
        'Callback', 'GUI_PhasePlot(gcbo)', ...
        'Visible', 'Off');
    
    
    % show phase plot of the function
    uicontrol(hfig, 'Style', 'pushbutton',...
        'Tag', 'showphaseplot',...
        'Position', [(width - 300) / 3, 0.05 * height, 150, 0.04 * height], ...
        'String', 'Show Phase plot',...
        'FontSize', 12, ...
        'Callback', 'GUI_PhasePlot(gcbo)', ...
        'FontName', 'Helvetica');
    
    % print phase plot of the function to png
    uicontrol(hfig, 'Style', 'pushbutton',...
        'Tag', 'printphaseplot',...
        'Position', [2 * (width - 300) / 3 + 150, 0.05 * height, 150, ...
            0.04 * height], ...
        'String', 'Print Phase plot',...
        'FontSize', 12, ...
        'Callback', 'GUI_PhasePlot(gcbo)', ...
        'FontName', 'Helvetica');
                
	return
end

tag = get(hObject, 'Tag');
color_schemes = {'p', 'm', 'c', 'd', 'e', 'u', 'v', 'a', 'b', 'x', 'y'};

if strcmp(tag, 'colorscheme')
    % main window
    hfig = findobj('Tag', 'PhasePlot');
    
    % axis to draw color scheme
    ax_col = get(hfig, 'UserData');
    
    % draw current color scheme (icon)  
    val = get(hObject, 'Value');
    col = color_schemes{val};
    % is the checkbox for NIST coloring selected or not?
    if get(findobj('Tag', 'NISTcoloring'), 'Value') >= 1
        % yes
        col = cat(2, col, 'n');
    end
    % phase resolution
    pres = round(get(findobj('Tag', 'SliderPhaseResolution'), 'Value'));
    
    % argument of z
    x = linspace(-1, 1, 120);
    y = x;
    [X, Y] = meshgrid(x, y);
    z = X + 1i * Y;
    axes(ax_col)
    PhasePlot(z, z, col, pres);
    
elseif strcmp(tag, 'NISTcoloring')
    % draw the color scheme in user interface according to NIST coloring or not
    GUI_PhasePlot(findobj('Tag', 'colorscheme'))

elseif strcmp(tag, 'plotsphere')
    % phase plot on sphere; show or hide the checkbox to select the entire
    % plane
    if get(hObject, 'Value') >= 1
        set(findobj('Tag', 'zplane'), 'Visible', 'On')
    else
        set(findobj('Tag', 'zplane'), 'Visible', 'Off')
        set(findobj('Tag', 'zplane'), 'Value', 0)
    end
    
elseif strcmp(tag, 'SliderPhaseResolution')
    % slider bar was clicked; update the value
    % new value
    val = get(hObject, 'Value');
    set(findobj('Tag', 'ValuePhaseResolution'), 'String', num2str(val))
    % draw the color scheme in user interface according to NIST coloring or not
    GUI_PhasePlot(findobj('Tag', 'colorscheme'))

elseif strcmp(tag, 'showphaseplot')
    % screen size
    scrsz = get(0, 'ScreenSize');
    % width of the main figure of the GUI
    width = 350;
    
    % various data from the user interface
    xmin = eval(get(findobj('Tag', 'xmin'), 'String'));
    xmax = eval(get(findobj('Tag', 'xmax'), 'String'));
    xres = eval(get(findobj('Tag', 'xres'), 'String'));
    ymin = eval(get(findobj('Tag', 'ymin'), 'String'));
    ymax = eval(get(findobj('Tag', 'ymax'), 'String'));
    yres = eval(get(findobj('Tag', 'yres'), 'String'));
    
    % argument of the function to be drawn
    if get(findobj('Tag', 'zplane'), 'Value') >= 1
        % phase plot on whole plane
        z = zplanePP;  
    else
        % phase plot on rectangle
        x = linspace(xmin, xmax, xres);
        y = linspace(ymin, ymax, yres);
        [X, Y] = meshgrid(x, y);
        z = X + 1i * Y;
    end
    
    % function values
    % read string from interface
    fct = get(findobj('Tag', 'function'), 'String');
    
    % modify string to allow simpler syntax like z*z
    fct = strrep(fct,'.*','*');  fct = strrep(fct,'*','.*');
    fct = strrep(fct,'./','/');  fct = strrep(fct,'/','./');
    fct = strrep(fct,'.^','^');  fct = strrep(fct,'^','.^');
    
    fct = eval(fct);
    
    % color scheme
    hobj = findobj('Tag', 'colorscheme');
    val = get(hobj, 'Value');
    col = color_schemes{val};
    % is the checkbox for NIST coloring selected or not?
    if get(findobj('Tag', 'NISTcoloring'), 'Value') >= 1
        % yes
        col = cat(2, col, 'n');
    end
    
    % phase resolution
    pres = round(get(findobj('Tag', 'SliderPhaseResolution'), 'Value'));
    
    % show phase plot
    hfig_phaseplot = findobj('Tag', 'fig_phaseplot');
    
    if isempty(hfig_phaseplot)
        hfig_phaseplot = figure('Name', 'Phase plot of the function', ...
            'NumberTitle', 'off', ...
            'Position', [(scrsz(3) - width) / 2 - 575, ...
                scrsz(4) - 420 - height_top_of_window - 28, 560, 420], ...
            'Tag', 'fig_phaseplot');
    end
    
    figure(hfig_phaseplot)
    if get(findobj('Tag', 'plotsphere'), 'Value') >= 1
        % phase plot on sphere
        PPOnSphere(z, fct, col, pres);
    else
        % phase plot on rectangel
        PhasePlot(z, fct, col, pres);
    end
    
    % show phase plot of identity
    hfig_identity = findobj('Tag', 'fig_identity');
    
    if isempty(hfig_identity)
        hfig_identity = figure('Name', 'Phase plot of the identity', ...
            'NumberTitle', 'off', ...
            'Position', [(scrsz(3) + width) / 2 + 15, ...
                scrsz(4) - 420 - height_top_of_window - 28, 560, 420], ...
            'Tag', 'fig_identity');
    end
    
    x = linspace(-1, 1, xres);
    y = x;
    [X, Y] = meshgrid(x, y);
    z = X + 1i * Y;
        
    figure(hfig_identity)
    PhasePlot(z, z, col, pres);

elseif strcmp(tag, 'printphaseplot')
    % screen size
    scrsz = get(0, 'ScreenSize');
    % print phase plot to a png file
    [file, pathname] = uiputfile('*.png', ...
        'Print phase plot to png', [pwd '\Figures\Figure1.png']);

    if file == 0
        % no file was specified; do nothing
    else
        file = [pathname, file];
        
        % make the figure of the phase plot the current figure
        hfig_phaseplot = findobj('Tag', 'fig_phaseplot');
        
        if isempty(hfig_phaseplot)
            hfig_phaseplot = figure('Name', 'Phase plot of the function', ...
                'NumberTitle', 'off', ...
                'Position', [10, scrsz(4) - 500, 560, 420], ...
                'Tag', 'fig_phaseplot');
            % figure wasn't present, so show phase plot first
            GUI_PhasePlot(findobj('Tag', 'showphaseplot'))
        end
        figure(hfig_phaseplot)
        
        % send phase plot to file
        % print(gcf, '-r600', '-dpng', file);
        print(gcf, '-r300', '-dpng', file);
    end
elseif strcmp(tag, 'PhasePlot')
    % close the figure for displaying (if not already done)
    hfig_phaseplot = findobj('Tag', 'fig_phaseplot');

    if ~isempty(hfig_phaseplot)
        delete(hfig_phaseplot)
    end
    
    hfig_identity = findobj('Tag', 'fig_identity');
    
    if ~isempty(hfig_identity)
        delete(hfig_identity)
    end
    
    % close main window
    delete(hObject)
end